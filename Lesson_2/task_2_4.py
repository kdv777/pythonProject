# 4. Обработка списка чисел.
# Техническое задание
#
# Создать список, содержащий цены на товары (10 – 20 товаров), например: [57.8, 46.51, 97, ...].
# Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде <r> руб <kk> коп (например «5 руб 04 коп»). Обратите внимание на изменение формата вывода.
# Вывести на экран цены(как числа), отсортированные по возрастанию, новый список для этого не создавать (показать, что объект списка после сортировки остался тот же).
# Создать новый список, содержащий те же цены, но отсортированные по убыванию. Показать, что это другой список, другой объект,
# Вывести цены пяти самых дорогих товаров.
# Список может содержать произвольное кол-во элементов.
# Часть цены в рублях оставляем без изменения. Нули добавляем только к копейкам.
# Считаем, что например 57.8 это 57 рублей и 80 копеек, а 8.04 это 8 рублей и 4 копейки.
# Обратите внимание на требование создавать или не создавать новый список. Не путайте создание нового списка и присваивание его некоторой переменной.
# Регулярные выражения не используем. Учимся парсить самостоятельно.

price_list = [57.8, 46.40, 97, 12.3, 67.54, 8.07, 982.12]
print(f'Исходный список:\n{price_list}')
tmp_str = ''
new_str = ''

for index in price_list: #добавляем нули к копейкам при необходимости
    el = str(index)
    # if type(index) == float:
    if isinstance(index, float):
        if len(el[el.index('.'):]) == 2:
            el += '0,'
        else:
            el += ','
    else:
        el += '.00,'  # el = str(float(index)) + '0,' #этот вариант более трудоемкий
    tmp_str += el

for index_el in range(len(tmp_str)): # формируем строку со вставкой руб и коп
    if ord(tmp_str[index_el]) == 46:
        new_str = new_str + ' руб '
    elif ord(tmp_str[index_el]) == 44:
        new_str = new_str + ' коп, '
    else:
        new_str = new_str + (tmp_str[index_el])

print(new_str) # 2 Вывести на экран эти цены через запятую в одну строку, цена должна отображаться в виде <r> руб <kk> коп (например «5 руб 04 коп»).

print('Доказательство операции in place:') # 3.Вывести на экран цены(как числа), отсортированные по возрастанию, новый список для этого не создавать
print('id перед сортировкой ', id(price_list))
price_list.sort()
print('id после сортировки ', id(price_list)) # 3. (показать, что объект списка после сортировки остался тот же)
print(price_list)

rev_price_list = list(reversed(price_list)) # 4. Создать новый список, содержащий те же цены, но отсортированные по убыванию. Показать, что это другой список, другой объект,
print(f'Сортировка по убыванию:\n{rev_price_list}')
print(type(rev_price_list))
print('id после сортировки по убыванию ', id(rev_price_list))

five_max_price = rev_price_list[:5]  # 5. Вывести цены пяти самых дорогих товаров.
print('5 самых дорогих товаров:')
for i in five_max_price:
    print(i)