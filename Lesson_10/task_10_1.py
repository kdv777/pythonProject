# Техническое задание:
#
# Элементы матрицы - целые числа(для простоты)
# Данные в матрице хранятся как список списков целых чисел.
# Реализовать перегрузку метода 'str()' для вывода матрицы в привычном виде - как в примере.
# Выравнивание чисел не обязательно, но желательно. Метод 'str()' возвращает строку.
# Реализовать перегрузку метода 'add()' для сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица. Метод 'add()' возвращает новую матрицу.
# Исходные матрицы остаются неизменными. Сложение элементов матриц выполнять поэлементно.
# Первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.
# Поэтому количество строк в обоих матрицах должно быть одинаковым. Аналогично со столбцами.
# Подумайте о проверках корректности данных при создании матрицы и при их сложении.
# Какие могут быть ошибки, когда мы работаем со списком списков.
# Что делают операторы (например сложения), когда выполнить операцию невозможно?
# Создать несколько матриц разного размера.
# Вывести их с помощью print
# Выполнить сложение матриц и вывести результат сложения.
# Подтвердить, что после сложения полученный объект имеет тип матрица.

class Matrix:

    matrix_data1 = [[31, 32], [37, 43], [51, 86]]
    matrix_data2 = [[17, 15], [21, 32], [11, 23]]
    matrix_str = ''

    def my_str(self):
        for el in self.matrix_data1:
            self.matrix_str = f'{self.matrix_str} | {str(el)} | \n'
        return self.matrix_str


    def my_add(self):
        self.result_matrix = []
        # for i in self.matrix_data1:
        pass




a = Matrix()
print(a.my_str())