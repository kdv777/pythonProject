# 1. Создать класс TrafficLight (светофор).
# Техническое задание:
#
# Хорошо подумайте какие из атрибутов являются атрибутами экземпляра, а какие класса.
# + определить атрибут color (цвет) - приватный. Это текущий цвет светофора.
# + Определить метод state (состояние), возвращающий текущий цвет в виде строки.
# +определить метод running (запуск)
# в рамках метода реализовать переключение светофора в режимы(цвета): красный, жёлтый, зелёный.
# продолжительность первого состояния (красный) составляет 7 секунд, второго (жёлтый) — 2 секунды,
# третьего (зелёный) — на ваше усмотрение.
# Подумайте о том как хранить продолжительности. В виде какой структуры и в качестве атрибута чего?
# переключение между режимами должно осуществляться как у реального светофора: красный, жёлтый, зелёный, жёлтый, красный и т.д.
# метод многократно меняет текущий цвет светофора в соответствии с продолжительностями в секундах
# и печатает текущий цвет с помощью state.
# Предусмотреть разумное ограничение на количество итераций.
# Проверить работу примера, создав экземпляр и вызвав метод running.
# Примечание:
#
# Для реализации задержек времени можно воспользоваться функцией sleep пакета time
# Циклическое переключение просто реализовать с помощью cycle пакета itertools
# Усложнение:
#
# Тайминги передаются при создании экземпляра светофора в виде трех чисел.
# Внутри конструктора их надо соединить в единую структуру с цветами, так, чтобы было максимально понятно и лаконично.
# Ограничение на количество итераций в методе running убрать. Прерывание работы светофора реализовать через нажатие Crtl-C
# (или stop в IDE) в процессе выполнения. Найти какое исключение при этом возникает. Обработать его и завершить программу
# с выводом диагностического сообщения.

import time
from itertools import cycle


class TrafficLight:

    __color = 'off'
    colors = ['red', 'yellow', 'green', 'yellow']

    def __init__(self, duration=[7, 2, 5]):
        self.duration = duration
        self.duration.append(self.duration[1])
        self.color_dur = list(zip(self.colors, self.duration))

    def state(self, __color):
        str_color = self.__color[0]
        return str_color

    def running(self):
        iter_color = cycle(self.color_dur)
        for t in range(6):  # Один цикл прохода = range(3), далее + 2.
            self.__color = next(iter_color)
            print(TrafficLight.state(self, self.__color[0]))
            time.sleep(self.__color[1])
        return self.__color


trafficLight1 = TrafficLight([7, 2, 4])
trafficLight1.running()
